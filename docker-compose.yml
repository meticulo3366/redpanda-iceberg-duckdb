version: '3.8'

services:
  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    platform: linux/amd64
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_REGION: us-east-1
      MINIO_DOMAIN: minio
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      lakehouse:
        aliases:
          - redpanda.minio
    volumes:
      - minio_data:/data

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    platform: linux/amd64
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb --ignore-existing myminio/redpanda;
      mc anonymous set public myminio/redpanda;
      echo 'Bucket created successfully';
      "
    networks:
      - lakehouse

  # PostgreSQL for Polaris metadata
  postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: polaris
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - lakehouse
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./resources/create-polaris-db.sql:/docker-entrypoint-initdb.d/01-init.sql

  # Apache Polaris Admin Tool - Bootstrap database schema
  polaris-bootstrap:
    image: apache/polaris-admin-tool:latest
    platform: linux/amd64
    restart: "no"
    environment:
      # Database connection - must match Polaris server
      POLARIS_PERSISTENCE_TYPE: relational-jdbc
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/polaris
      QUARKUS_DATASOURCE_USERNAME: polaris
      QUARKUS_DATASOURCE_PASSWORD: polaris123
    command: ["bootstrap", "-r", "POLARIS", "-c", "POLARIS,root,pass"]
    depends_on:
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - lakehouse

  # Apache Polaris REST Catalog server
  polaris:
    image: apache/polaris:latest
    platform: linux/amd64
    ports:
      - "8181:8181"
    environment:
      # AWS/S3 configuration
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      # Database connection - Polaris with PostgreSQL
      POLARIS_PERSISTENCE_TYPE: relational-jdbc
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/polaris
      QUARKUS_DATASOURCE_USERNAME: polaris
      QUARKUS_DATASOURCE_PASSWORD: polaris123
      # Bootstrap credentials - inform server of bootstrapped realm
      POLARIS_BOOTSTRAP_CREDENTIALS: POLARIS,root,pass
    depends_on:
      polaris-bootstrap:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:8181/api/catalog/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 15
    networks:
      - lakehouse

  # Redpanda broker with Iceberg integration
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v25.2.2
    platform: linux/amd64
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=2G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --kafka-addr=internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr=internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr=internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr=internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr=internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr=redpanda:33145
      - --advertise-rpc-addr=redpanda:33145
      - --mode=dev-container
      - --default-log-level=info
    ports:
      - "19092:19092"
      - "18081:18081"
      - "18082:18082"
      - "9644:9644"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy:.*true'"]
      interval: 10s
      timeout: 10s
      retries: 15
    depends_on:
      polaris:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - lakehouse
    volumes:
      - redpanda_data:/var/lib/redpanda/data
      - ./redpanda/redpanda.yaml:/etc/redpanda/.bootstrap.yaml

  # Redpanda Console
  console:
    image: docker.redpanda.com/redpandadata/console:v2.5.2
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: redpanda:9092
      KAFKA_SCHEMAREGISTRY_ENABLED: "true"
      KAFKA_SCHEMAREGISTRY_URLS: http://redpanda:8081
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - lakehouse

  # Producer (generates deterministic trade data)
  producer:
    build:
      context: ./redpanda
      dockerfile: Dockerfile
    platform: linux/amd64
    environment:
      BROKER: redpanda:9092
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - lakehouse
    profiles:
      - manual

  # DuckDB CLI with Iceberg extension
  duckdb-cli:
    build:
      context: ./duckdb-ui
      dockerfile: Dockerfile
    platform: linux/amd64
    working_dir: /workspace
    ports:
      - "4213:4213"
    volumes:
      - ./duckdb:/workspace/duckdb:ro
      - ./resources:/workspace/resources:ro
      - duckdb_data:/root/.duckdb
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      POLARIS_ENDPOINT: http://polaris:8181/api/catalog/
      POLARIS_CLIENT_ID: root
      POLARIS_CLIENT_SECRET: pass
      POLARIS_WAREHOUSE: redpanda_catalog
    command:
      - /bin/sh
      - -c
      - |
        echo "Installing DuckDB extensions..."
        duckdb -c "INSTALL httpfs; INSTALL iceberg;"
        echo "âœ“ DuckDB extensions installed"

        echo ""
        echo "=========================================="
        echo "DuckDB CLI container is ready"
        echo "Execute queries with:"
        echo "  docker exec -it redpanda-iceberg-duckdb-duckdb-cli-1 duckdb"
        echo "=========================================="
        echo ""

        # Keep container alive
        tail -f /dev/null
    depends_on:
      polaris:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    networks:
      - lakehouse

networks:
  lakehouse:
    driver: bridge

volumes:
  minio_data:
  postgres_data:
  redpanda_data:
  duckdb_data:
