#!/bin/bash
set -euo pipefail

# End-to-end test: Redpanda Iceberg Topics → DuckDB → Redpanda
# This script validates the complete workflow with native Redpanda Iceberg integration

cd "$(dirname "$0")/.."  # Change to project root directory

echo "=== Starting End-to-End Test (Redpanda Iceberg Topics) ==="

# Clean up any existing environment
echo "Cleaning up previous environment..."
docker compose down -v 2>/dev/null || true

# Build duckdb-cli and producer containers
echo ""
echo "Step 0: Building duckdb-cli and producer containers..."
docker compose build duckdb-cli producer

# Start all services
echo ""
echo "Step 1: Starting services (MinIO, PostgreSQL, Polaris Bootstrap, Polaris, Redpanda, DuckDB)..."
docker compose up -d minio postgres polaris-bootstrap polaris redpanda console duckdb-cli

# Wait for services to be fully ready
echo "Waiting for services to stabilize..."
sleep 20

# Check service health
echo "Checking service health..."
docker compose ps

# Create topics with Iceberg mode
echo ""
echo "Step 2: Creating Redpanda topic with Iceberg mode..."
docker compose exec -T redpanda rpk topic create trades \
    --partitions 1 \
    --replicas 1 \
    --topic-config=redpanda.iceberg.mode=value_schema_latest \
    2>/dev/null || echo "Topic 'trades' may already exist"

# Create analytics topic WITH Iceberg mode (for bidirectional flow)
docker compose exec -T redpanda rpk topic create trade_analytics \
    --partitions 1 \
    --replicas 1 \
    --topic-config=redpanda.iceberg.mode=value_schema_latest \
    2>/dev/null || echo "Topic 'trade_analytics' may already exist"

# Register schemas for both topics
echo ""
echo "Step 3: Registering JSON schemas for Iceberg topics..."
docker compose exec -T redpanda bash -c 'cat <<EOF | rpk registry schema create trades-value --schema /dev/stdin --type json
{
  "type": "object",
  "properties": {
    "trade_id": {"type": "string"},
    "symbol": {"type": "string"},
    "price": {"type": "number"},
    "qty": {"type": "integer"},
    "side": {"type": "string"},
    "ts_event": {"type": "string", "format": "date-time"}
  },
  "required": ["trade_id", "symbol", "price", "qty", "side", "ts_event"]
}
EOF
'

# Register schema for analytics topic
docker compose exec -T redpanda bash -c 'cat <<EOF | rpk registry schema create trade_analytics-value --schema /dev/stdin --type json
{
  "type": "object",
  "properties": {
    "symbol": {"type": "string"},
    "trade_count": {"type": "integer"},
    "avg_price": {"type": "number"},
    "min_price": {"type": "number"},
    "max_price": {"type": "number"},
    "total_volume": {"type": "integer"},
    "buy_count": {"type": "integer"},
    "sell_count": {"type": "integer"},
    "first_trade_time": {"type": "string"},
    "last_trade_time": {"type": "string"}
  },
  "required": ["symbol", "trade_count", "avg_price", "total_volume"]
}
EOF
'

# Produce data
echo ""
echo "Step 4: Producing trade data..."
docker run --rm \
    --network redpanda-iceberg-duckdb_lakehouse \
    redpanda-iceberg-duckdb-producer \
    --brokers redpanda:9092 \
    --topic trades \
    --count 10000 \
    --seed 42

# Wait for Iceberg snapshot (default is 10 seconds)
echo ""
echo "Step 5: Waiting for Iceberg snapshot creation (15 seconds)..."
sleep 15

# Check if bootstrap was successful
echo ""
echo "Step 6: Verifying Polaris bootstrap completed..."
if docker compose ps polaris-bootstrap 2>/dev/null | grep -q "exited (0)"; then
    echo "✓ Polaris database bootstrap completed successfully"
else
    echo "⚠ Checking bootstrap logs for status..."
    docker compose logs polaris-bootstrap | tail -20
fi

# Set up Polaris catalog
echo ""
echo "Step 7: Setting up Polaris catalog (warehouse, RBAC)..."
docker compose exec -T duckdb-cli bash /workspace/resources/setup_polaris_catalog.sh

# Generate DuckDB init script with token
echo ""
echo "Step 8: Generating DuckDB initialization script with OAuth2 token..."
docker compose exec -T duckdb-cli /workspace/duckdb/get_token.sh

# Verify Iceberg table with DuckDB
echo ""
echo "Step 9: Querying Iceberg table with DuckDB..."
docker compose exec -T duckdb-cli duckdb -init /workspace/duckdb/init-env.sql -c ".read /workspace/duckdb/verify_iceberg.sql"

# Query Iceberg with DuckDB and publish results back to Redpanda
echo ""
echo "Step 10: Querying Iceberg and publishing analytics to Redpanda..."
docker compose exec -T \
    -e RP_BROKERS=redpanda:9092 \
    -e RP_TOPIC_RESULTS=trade_analytics \
    -e POLARIS_ENDPOINT=http://polaris:8181 \
    -e POLARIS_CLIENT_ID=root \
    -e POLARIS_CLIENT_SECRET=pass \
    duckdb-cli python3 /workspace/duckdb/query_and_publish.py

# Verify the analytics were published to Redpanda
echo ""
echo "Step 11: Verifying analytics published to Redpanda topic..."
echo "Consuming from trade_analytics topic (expecting 8 symbols):"
docker compose exec -T redpanda rpk topic consume trade_analytics --num 8 --format json

# Wait for analytics Iceberg snapshot to be created
echo ""
echo "Step 12: Waiting for analytics Iceberg snapshot (15 seconds)..."
sleep 15

# Query the analytics Iceberg table to complete the cycle
echo ""
echo "Step 13: Querying analytics Iceberg table (completing bidirectional flow)..."
docker compose exec -T duckdb-cli duckdb -init /workspace/duckdb/init-env.sql -c "
SELECT
    'Analytics Iceberg Table' as source,
    COUNT(*) as symbol_count,
    SUM(trade_count) as total_trades
FROM iceberg_catalog.redpanda.trade_analytics;
"

echo ""
echo "Step 14: Showing analytics data from Iceberg table..."
docker compose exec -T duckdb-cli duckdb -init /workspace/duckdb/init-env.sql -c "
SELECT
    symbol,
    trade_count,
    avg_price,
    total_volume
FROM iceberg_catalog.redpanda.trade_analytics
ORDER BY total_volume DESC
LIMIT 5;
"

# Show summary of both Iceberg tables
echo ""
echo "Step 15: Summary of Iceberg tables..."
docker compose exec -T duckdb-cli duckdb -init /workspace/duckdb/init-env.sql -c "
SELECT
    'Trades Table' as table_name,
    'Total Records' as metric,
    COUNT(*)::VARCHAR as value
FROM iceberg_catalog.redpanda.trades
UNION ALL
SELECT
    'Trades Table' as table_name,
    'Unique Symbols' as metric,
    COUNT(DISTINCT symbol)::VARCHAR as value
FROM iceberg_catalog.redpanda.trades
UNION ALL
SELECT
    'Analytics Table' as table_name,
    'Total Symbols' as metric,
    COUNT(*)::VARCHAR as value
FROM iceberg_catalog.redpanda.trade_analytics
UNION ALL
SELECT
    'Analytics Table' as table_name,
    'Total Trades Aggregated' as metric,
    SUM(trade_count)::VARCHAR as value
FROM iceberg_catalog.redpanda.trade_analytics;
"

echo ""
echo "=== End-to-End Test PASSED ==="
echo "✓ Data successfully flowed through BIDIRECTIONAL Iceberg pipeline:"
echo "  1. Producer → Redpanda (trades topic with Iceberg mode)"
echo "  2. Redpanda → trades Iceberg table (automatic snapshots)"
echo "  3. DuckDB → Query trades Iceberg table via REST catalog"
echo "  4. DuckDB → Publish analytics to Redpanda (trade_analytics topic with Iceberg mode)"
echo "  5. Redpanda → trade_analytics Iceberg table (automatic snapshots)"
echo "  6. DuckDB → Query analytics Iceberg table (complete cycle!)"
echo ""
echo "Bidirectional Iceberg Flow Demonstrated:"
echo "  ✓ Kafka → Iceberg → DuckDB → Kafka → Iceberg → DuckDB"
echo "  ✓ Both directions use native Redpanda Iceberg Topics"
echo "  ✓ All data queryable via Polaris REST catalog"
echo "  ✓ No custom services - fully native integration"
echo ""
echo "Services are still running. To clean up, run: docker compose down -v"
exit 0
